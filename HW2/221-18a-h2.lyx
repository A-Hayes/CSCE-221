#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 0.8in
\rightmargin 1in
\bottommargin 0.8in
\headheight 0cm
\headsep 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\size larger
CSCE 221 Cover Page
\begin_inset Newline newline
\end_inset

 Homework Assignment #2 
\begin_inset Newline newline
\end_inset

Due March 25 at 23:59 pm to eCampus
\end_layout

\begin_layout Standard
\align right

\size larger
Asa
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Hayes 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

UIN: 525003952
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align right

\size larger
User Name: AsaHayes 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

asahayes@tamu.edu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\size default

\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
Please list all sources in the table below including web pages which you
 used to solve or implement the current homework.
 If you fail to cite sources you can get a lower number of points or even
 zero, read more Aggie Honor System Office 
\begin_inset CommandInset href
LatexCommand href
target "http://aggiehonor.tamu.edu/"

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of sources 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
People
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web pages (provide URL) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printed material
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This course's textbook
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rosen - Discrete Mathematics & Applications
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other Sources 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
I certify that I have listed all the sources that I used to develop the
 solutions/codes to the submitted work.
\end_layout

\begin_layout Quotation
“On my honor as an Aggie, I have neither given nor received any unauthorized
 help on this academic work.” 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Your Name 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Asa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hayes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27 March, 2018
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Homework 2
\end_layout

\begin_layout Standard
\align center

\series bold
due March 25 at 11:59 pm to eCampus.
\end_layout

\begin_layout Enumerate
(15 points) Describe how to implement the stack ADT using two queues.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Write a C++ function that implements your solution.
 You can use the C++ STL queue container.
 
\end_layout

\begin_deeper
\begin_layout Standard
Code can be run with 
\begin_inset Quotes eld
\end_inset

make stackFromQueues && ./stackFromQueues
\begin_inset Quotes erd
\end_inset

.
 Output will be list of popped elements.
\end_layout

\end_deeper
\begin_layout Enumerate
What is the running time of the push and pop functions in this case? 
\end_layout

\begin_deeper
\begin_layout Standard
The push operation has a runtime of 1 + 2n, or O(n), where n is the size
 of the list before insertion.
 Pop is only O(1), as it does not require the movement of any other elements
 besides the top of the stack.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
(15 points) Write a recursive function in C++ that counts the number of
 nodes in a singly linked list.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Test your function using different singly linked lists.
 Include the code and screenshots with testing cases.
\end_layout

\begin_deeper
\begin_layout Standard
Code can be run with 
\begin_inset Quotes eld
\end_inset

make recurLLCount && ./recurLLCount
\begin_inset Quotes erd
\end_inset

.
 Output will be size of linked list in recurLLCount.cpp.
\end_layout

\begin_layout Standard
Testing Images: 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename C:/Users/A/Desktop/recurLL1.PNG
	display false
	width 75line%
	height 50pheight%
	keepAspectRatio

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Write a recurrence relation that represents your algorithm.
 
\end_layout

\begin_deeper
\begin_layout Standard
Relation: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$a_{n} = a_{n - 1} + 1$
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Solve the relation using the iterating or a recursive tree method to obtain
 the running time of the algorithm in Big-O notation.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\end_layout

\begin_layout Plain Layout

a_{n} = a_{n - 1} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n-1} = a_{n - 2} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n-2} = a_{n - 3} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n-3} = a_{n - 4} + 1 ...
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{4} = a_{3} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{3} = a_{2} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{2} = a_{1} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{1} = 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n} = 1 * n
\end_layout

\begin_layout Plain Layout

a_{n} = O(n)
\end_layout

\begin_layout Plain Layout

$
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
(15 points) Write a C++ recursive function that finds the maximum value
 in an array of integers without using any loops.
\end_layout

\begin_deeper
\begin_layout Enumerate
Test your function using different input arrays.
 Include the code and screenshots with testing cases.
\end_layout

\begin_deeper
\begin_layout Standard
Code can be run with 
\begin_inset Quotes eld
\end_inset

make noLoopMax && ./noLoopMax
\begin_inset Quotes erd
\end_inset

.
 Output will be incremental display of each recursion's result.
\end_layout

\begin_layout Standard
Testing Images: 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename C:/Users/A/Desktop/NoLoopTest1.PNG
	display false
	width 75line%
	height 50pheight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename C:/Users/A/Desktop/NoLoopTest2.PNG
	display false
	width 75line%
	height 50pheight%
	keepAspectRatio

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Write a recurrence relation that represents your algorithm.
 Solve the relation and obtain the running time of the algorithm in Big-O
 notation.
 
\end_layout

\begin_deeper
\begin_layout Standard
Relation: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$a_{n} = a_{n - 1} + 1 $
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\end_layout

\begin_layout Plain Layout

a_{n} = a_{n - 1} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n-1} = a_{n - 2} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n-2} = a_{n - 3} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n-3} = a_{n - 4} + 1 ...
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{4} = a_{3} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{3} = a_{2} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{2} = a_{1} + 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{1} = 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

a_{n} = 1 * n
\end_layout

\begin_layout Plain Layout

a_{n} = O(n)
\end_layout

\begin_layout Plain Layout

$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Despite the different problems being solved, this problem does the same
 amount of operations per list size as the LinkedList size function from
 (2).
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
(15 points) What is the best, worst and average running time of quick sort
 algorithm? Provide arrangement of the input and the selection of the pivot
 point at every case.
 Provide a recursive relation and solution for each case.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Best Case: 
\end_layout

\begin_deeper
\begin_layout Itemize
Runtime: O(n log(n))
\end_layout

\begin_layout Itemize
Input Arrangement: Split into 2 parts, as closely as possible
\end_layout

\begin_layout Itemize
Pivot Point: Median value of input list
\end_layout

\begin_deeper
\begin_layout Standard
Recursive Relation: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$T(n) = 2T(
\backslash
frac{n}{2}) + n$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Solution (Master Theorem): a = 2, b = 2, f(n) = n ; 
\begin_inset ERT
status open

\begin_layout Plain Layout

$log_{2}(2) = 1, n^{1} = n$
\end_layout

\end_inset

, thus the runtime is 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
Theta (n log(n))$
\end_layout

\end_inset

.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Average Case:
\end_layout

\begin_deeper
\begin_layout Itemize
Runtime: O(n log(n))
\end_layout

\begin_layout Itemize
Input Arrangement: Split into 2 parts, roughly even
\end_layout

\begin_layout Itemize
Pivot Point: Random/Last element in list
\end_layout

\begin_layout Standard
Recursive Relation: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$T(n) = T(i-1)+ T(n-i) + n$
\end_layout

\end_inset

, where 
\begin_inset ERT
status open

\begin_layout Plain Layout

$0 
\backslash
leq i 
\backslash
leq n-1$
\end_layout

\end_inset

, i being the size of one of the partitions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\end_layout

\begin_layout Plain Layout

T(n) = T(i)+ T(n-i) + n 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Sum of all cases, divided by n as each element has 1/n chance of being pivot
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n) = 
\backslash
frac{1}{n} 
\backslash
sum^{n}_{i=1} ( T(i-1) + T(n-i) + an 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n) = 
\backslash
frac{2}{n} ( T(0) + T(1) + T(2) + ...
 + T(n-3) + T(n-2) + T(n-1) ) + an 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

n * T(n) = 2 ( T(0) + T(1) + T(2) + ...
 + T(n-3) + T(n-2) + T(n-1) ) + an^{2} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

(n-1) * T(n-1) = 2 ( T(0) + T(1) + T(2) + ...
 + T(n-3) + T(n-2) + T(n-1) ) + a(n-1)^{2} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

(n-1) * T(n-1) = 2 ( T(0) + T(1) + T(2) + ...
 + T(n-3) + T(n-2) + T(n-1) ) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

n * T(n) - (n-1) * T(n-1) = (2 ( T(0) + T(1) + T(2) + ...
 + T(n-3) + T(n-2) + T(n-1) ) + n^{2}) - (2 ( T(0) + T(1) + T(2) + ...
 + T(n-3) + T(n-2) + T(n-1) )) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

n * T(n) - (n-1) * T(n-1) = 2(T(n-1) + n) - 1 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

n * T(n) = (n+1) * T(n-1) + 2n 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
frac{T(n)}{n+1} = 
\backslash
frac{T(n-1))}{n} + 
\backslash
frac{2}{n+1} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
frac{T(2)}{n+1} = 
\backslash
frac{T(n)}{n+1} - 
\backslash
frac{T(n-1)}{n} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
frac{T(n))}{n+1} = 
\backslash
frac{T(0)}{1} + 2(
\backslash
frac{1}{2} + 
\backslash
frac{1}{3} + 
\backslash
frac{1}{4} + ...
 + 
\backslash
frac{1}{n} + 
\backslash
frac{1}{n+1}) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n) = 2a ( (Harmonic Series to n+1) - 1 ) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n) = 
\backslash
Theta(n log n) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

$
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Worst Case: 
\end_layout

\begin_deeper
\begin_layout Itemize
Runtime: O(
\begin_inset ERT
status open

\begin_layout Plain Layout

$n^{2}$
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
Input Arrangement: List is not split, or split into 2 lists with lengths
 n and 0
\end_layout

\begin_layout Itemize
Pivot Point: Largest/Smallest value in list
\end_layout

\begin_layout Standard
Recursive Relation: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$T(n) = T(n-1) + n$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\end_layout

\begin_layout Plain Layout

T(n) = T(n-1) + n 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n-1) = T(n-2) + (n-1) 
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

T(n-2) = T(n-3) + (n-2) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n-3) = T(n-4) + (n-3) ...
 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(4) = T(3) + 4 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(3) = T(2) + 3 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(2) = T(1) + 2 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(1) = 0 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n) = n + (n-1) + (n-2) + (n-3) + ...
 + 3 + 2 
\backslash
approx 
\backslash
frac{n^{2}}{2} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

$
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
(10 points) What is the best, worst and average running time of merge sort
 algorithm? Use two methods for solving a recurrence relation for the average
 case to justify your answer.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Best Runtime: O(n log(n))
\end_layout

\begin_layout Enumerate
Average Runtime: O(n log(n))
\end_layout

\begin_layout Enumerate
Worst Runtime: O(n log(n))
\end_layout

\begin_deeper
\begin_layout Standard
Recurrence Relation (Avg.): 
\begin_inset ERT
status open

\begin_layout Plain Layout

$T(n) = 2T(
\backslash
frac{n}{2}) + n$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Solution 1 (Master Theorem): a = 2, b = 2, f(n) = n ; 
\begin_inset ERT
status open

\begin_layout Plain Layout

$log_{2}(2) = 1, n^{1} = n$
\end_layout

\end_inset

, thus the runtime is 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
Theta (n log(n))$
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Solution 2: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$ 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n) = 2T(
\backslash
frac{n}{2}) + n 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

     = 2( 2T(
\backslash
frac{n}{4}) + 
\backslash
frac{n}{2} ) + n = 4T(
\backslash
frac{n}{4}) + 2n
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

     = 2( 4T(
\backslash
frac{n}{8}) + 
\backslash
frac{2n}{4} ) + n = 8T(
\backslash
frac{n}{8}) + 3n
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

     = 2^{k} T(
\backslash
frac{n}{2^{k}}) + (k*n) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

1 = 
\backslash
frac{n}{2^{k}} 
\backslash
rightarrow k = log_{2}(n) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

T(n) = 2^{log_{2}(n)} T(
\backslash
frac{n}{2^{log_{2}(n)}}) + n(log_{2}(n)) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

     = n T(
\backslash
frac{n}{n}) + n(log_{2}(n)) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

     = n T(1) +  n log_{2}(n) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	 = n + n(log_{2}(n)) 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

n + n(log_{2}(n)) = 
\backslash
Theta (n log_{2}(n)))
\end_layout

\begin_layout Plain Layout

$
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
(10 points) R-10.17 p.
 493
\begin_inset Newline newline
\end_inset

For the following statements about red-black trees, provide a justification
 for each true statement and a counterexample for each false one.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
A subtree of a red-black tree is itself a red-black tree.
 
\end_layout

\begin_deeper
\begin_layout Standard
False: In the case that the subtree starts with a red node as its root,
 this disqualifies it from being a red-black tree as the root of a red black
 tree must be a black node.
\end_layout

\end_deeper
\begin_layout Enumerate
The sibling of an external node is either external or it is red.
\end_layout

\begin_deeper
\begin_layout Standard
True: For the case of the sibling being an external node, this has the black-cou
nt at the same for both paths, keeping the validity of the red-black tree.
 For the case of the sibling being a red node, this is valid as well, as
 the black count is still the same as long as the children of that red node
 were external nodes, else the black count would not be constant.
 
\end_layout

\end_deeper
\begin_layout Enumerate
There is a unique (2,4) tree associated with a given red-black tree.
\end_layout

\begin_deeper
\begin_layout Standard
True: To extend any red-black tree into a 2,4 tree, one can just merge all
 of the red child nodes of a black node into that node.
\end_layout

\end_deeper
\begin_layout Enumerate
There is a unique red-black tree associated with a given (2,4) tree.
\end_layout

\begin_deeper
\begin_layout Standard
False: It is not possible to perfectly reverse the process described in
 (c) because the nodes in the 2,4 tree have different ways the expanded
 red nodes can be arranged.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
(10 points) R-10.19 p.
 493
\begin_inset Newline newline
\end_inset

Consider a tree 
\begin_inset Formula $T$
\end_inset

 storing 100,000 entries.
 What is the worst-case height of 
\begin_inset Formula $T$
\end_inset

 in the following cases?
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $T$
\end_inset

 is an AVL tree.
\end_layout

\begin_deeper
\begin_layout Standard
AVL Trees have a maximum height of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$log(n)$
\end_layout

\end_inset

, so 
\begin_inset ERT
status open

\begin_layout Plain Layout

$log_{2}(100000) 
\backslash
approx 16.61$
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $T$
\end_inset

 is a (2,4) tree.
\end_layout

\begin_deeper
\begin_layout Standard
2,4 Trees have a maximum height of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$log(n)$
\end_layout

\end_inset

, so 
\begin_inset ERT
status open

\begin_layout Plain Layout

$log_{2}(100000) 
\backslash
approx 16.61$
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $T$
\end_inset

 is a red-black tree.
\end_layout

\begin_deeper
\begin_layout Standard
Red-Black trees have a maximum height of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$2 log n$
\end_layout

\end_inset

, so 
\begin_inset ERT
status open

\begin_layout Plain Layout

$2 log_{2}(100000) 
\backslash
approx 33.22$
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $T$
\end_inset

 is a binary search tree.
\end_layout

\begin_deeper
\begin_layout Standard
As a regular binary search tree is not necessarily balanced, it could be
 the case that all the nodes are on one side.
 A binary search tree only requires that all nodes to the left of root have
 lesser data values, and all nodes to the right have greater data values
 than root, so it can become unbalanced much more easily.
 If all nodes beginning with root are larger than the next, this would essential
ly become a linear tree, which would just have a height of n, or 100,000
 in this case.
 For data like that, linked list or array would most likely be a better
 choice.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
(10 points) R-9.16 p.
 418
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Draw an example skip list that results from performing the following series
 of operations on the skip list shown in Figure 9.12: 
\family typewriter
erase(
\family default
38
\family typewriter
), insert(
\family default
48,x
\family typewriter
), insert(
\family default
24,y
\family typewriter
), erase(
\family default
55
\family typewriter
)
\family default
.
 Record your coin flips, as well.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename C:/Users/A/Desktop/222_Homework2_Problem8.png
	display false
	width 75line%
	height 50pheight%
	keepAspectRatio

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
