#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 0.8in
\rightmargin 1in
\bottommargin 0.8in
\headheight 0cm
\headsep 0cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\size larger
CSCE 221 Cover Page
\end_layout

\begin_layout Standard
\align center

\size larger
Homework #1 
\end_layout

\begin_layout Standard
\align center

\size large
Due February 11 at midnight to eCampus
\size larger

\begin_inset VSpace bigskip
\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
First Name: Asa Last Name: Hayes UIN: 525003952
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
User Name: AsaHayes E-mail address: asahayes@tamu.edu
\size default

\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
Please list all sources in the table below including web pages which you
 used to solve or implement the current homework.
 If you fail to cite sources you can get a lower number of points or even
 zero, read more: 
\begin_inset CommandInset href
LatexCommand href
name "Aggie Honor System Office"
target "http://aggiehonor.tamu.edu/"

\end_inset

 
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of sources 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
People
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web pages (provide URL) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printed material
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other Sources 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Quotation
I certify that I have listed all the sources that I used to develop the
 solutions/codes to the submitted work.
\end_layout

\begin_layout Quotation
“On my honor as an Aggie, I have neither given nor received any unauthorized
 help on this academic work.” 
\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Your Name 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Asa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hayes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 February, 2018
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Quote

\series bold
Type solutions to the homework problems listed below using preferably \SpecialChar LyX
/\SpecialChar LaTeX

 word processors, see the class webpage for more information about their
 installation and tutorials.
 
\end_layout

\begin_layout Enumerate
(10 points) Write the C++ classes called 
\family typewriter
ArithmeticProgression
\family default
 and 
\family typewriter
GeometricProgression
\family default
 that are derived from the abstract class 
\family typewriter
Progression
\family default
, with two pure virtual functions, 
\family typewriter
getNext()
\family default
 and 
\family typewriter
sum()
\family default
, see the course textbook p.
 87–90 for more details.
 Each subclass should implement these functions in order to generate elements
 of the sequences and their sums.
 Test your program for the different values of 
\begin_inset Formula $d$
\end_inset

, 
\begin_inset Formula $r$
\end_inset

 and the number of elements 
\begin_inset Formula $n$
\end_inset

 in each progression.
 
\begin_inset Newline newline
\end_inset

What is the classification of those functions: 
\family typewriter
getNext()
\family default
 and 
\family typewriter
sum()
\family default
 in terms of the Big-O notation?
\end_layout

\begin_deeper
\begin_layout Standard
Recall the definitions of the arithmetic and geometric progressions.
 
\end_layout

\begin_layout Standard

\series bold
\emph on
Definition
\series default
\emph default
: An 
\emph on
arithmetic progression
\emph default
 with the initial term 
\begin_inset Formula $a$
\end_inset

 and the common real difference 
\begin_inset Formula $d$
\end_inset

 is a sequence of the form
\end_layout

\begin_layout Standard
\begin_inset Formula $a,a+d,a+2d,\ldots,a+nd,\ldots$
\end_inset


\end_layout

\begin_layout Standard

\series bold
\emph on
Definition
\series default
\emph default
: A 
\emph on
geometric progression
\emph default
 with the initial term 
\begin_inset Formula $a$
\end_inset

 and the common real ratio 
\begin_inset Formula $r$
\end_inset

 is a sequence of the form
\end_layout

\begin_layout Standard
\begin_inset Formula $a,ar,ar^{2},\dots,ar^{n},\dots$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
The function getNext() is O(1) as it does the same amount of operations
 regardless of input.
 The function sum() is O(n) because it loops thru the same set of operations
 n times.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#include <cmath> // for Math.pow in the geometric progression
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
class ArithmeticProgression : Progression{
\end_layout

\begin_deeper
\begin_layout LyX-Code
double initTerm, curTerm, comRealDif;
\end_layout

\begin_layout LyX-Code
int n;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
ArithmeticProgression() : initTerm(1), comRealDif(1), n(1){
\end_layout

\begin_deeper
\begin_layout LyX-Code
curTerm = initTerm;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
ArithmeticProgression(double a, double d){
\end_layout

\begin_deeper
\begin_layout LyX-Code
initTerm = a;
\end_layout

\begin_layout LyX-Code
comRealDif = d;
\end_layout

\begin_layout LyX-Code
curTerm = initTerm;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
double getNext(){
\end_layout

\begin_deeper
\begin_layout LyX-Code
n++;
\end_layout

\begin_layout LyX-Code
curTerm = a + (n * comRealDif);
\end_layout

\begin_layout LyX-Code
return curTerm;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
double sum(){
\end_layout

\begin_deeper
\begin_layout LyX-Code
double sum = a;
\end_layout

\begin_layout LyX-Code
for(i = 0; i < n-1; i++){
\end_layout

\begin_deeper
\begin_layout LyX-Code
sum += a + (i * comRealDif);
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
return sum;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
class GeometricProgression : Progression{
\end_layout

\begin_deeper
\begin_layout LyX-Code
double initTerm, curTerm, comRealRat;
\end_layout

\begin_layout LyX-Code
int n;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
GeometricProgression() : initTerm(1), comRealRat(1), n(1){
\end_layout

\begin_deeper
\begin_layout LyX-Code
curTerm = initTerm;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
GeometricProgression(double a, double r){
\end_layout

\begin_deeper
\begin_layout LyX-Code
initTerm = a;
\end_layout

\begin_layout LyX-Code
comRealRat = r;
\end_layout

\begin_layout LyX-Code
curTerm = initTerm;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
double getNext(){
\end_layout

\begin_deeper
\begin_layout LyX-Code
n++;
\end_layout

\begin_layout LyX-Code
curTerm = a * Math.pow(comRealRat, n);
\end_layout

\begin_layout LyX-Code
return curTerm;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
double sum(){
\end_layout

\begin_deeper
\begin_layout LyX-Code
double sum = a;
\end_layout

\begin_layout LyX-Code
for(i = 0; i < n-1; i++){
\end_layout

\begin_deeper
\begin_layout LyX-Code
sum += a * Math.pow(comRealRat, i);
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
return sum;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Enumerate
(10 points) Use the STL class 
\family typewriter
vector<double>
\family default
 to write a C++ function that takes two vectors, 
\family typewriter
a
\family default
 and 
\family typewriter
b
\family default
, of the same size and returns a vector 
\family typewriter
c
\family default
 such that 
\begin_inset Formula $c[i]=a[i]\cdot b[i]$
\end_inset

.
 How many scalar multiplications are used to create elements of the vector
 
\family typewriter
c
\family default
 of size 
\begin_inset Formula $n$
\end_inset

? What is the classification of this algorithm in terms of the Big-O notation?
 
\end_layout

\begin_layout LyX-Code
vector<int> MultVectors(vector<int> a, vector<int> b){
\end_layout

\begin_deeper
\begin_layout LyX-Code
vector<int> c;
\end_layout

\begin_layout LyX-Code
for(int i = 0; i < a.size(); i++){
\end_layout

\begin_deeper
\begin_layout LyX-Code
c.push_back(a[i]*b[i]);
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
return c;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
If n is the size of a and b, then this algorithm is O(n)
\end_layout

\begin_layout LyX-Code
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Enumerate
(10 points) Use the STL class 
\family typewriter
vector<int>
\family default
 to write a C++ function that returns true if there are two elements of
 the vector for which their product is odd, and returns false otherwise.
 Provide a formula on the number of scalar multiplications in terms of 
\begin_inset Formula $n$
\end_inset

, the length of the vector, to solve the problem in the best and the worst
 cases.
 Describe the situations of getting the best and worst cases.
 What is the classification of the algorithm in the best and worst cases
 in terms of the Big-O notation?
\end_layout

\begin_layout LyX-Code
boolean oddCheck(vector<int> a){
\end_layout

\begin_deeper
\begin_layout LyX-Code
for(int i = 0; i < a.size() - 1; i++){
\end_layout

\begin_deeper
\begin_layout LyX-Code
for(int j = i + 1; j < a.size(); j++){
\end_layout

\begin_deeper
\begin_layout LyX-Code
if( ( (a[i] * a[j]) % 2 ) != 0 ){
\end_layout

\begin_deeper
\begin_layout LyX-Code
return true;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
return false;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
The best-case formula for the number of scalar multiplications would be
 if the first two items in 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 had an odd product, where the formula would be f(n) = 1 (O(1)).
 The worst-case formula would be if either only the last two elements of
 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 had an odd product or if no elements of a had an odd product, so f(n) =
 n! (O(n!)).
\end_layout

\begin_layout LyX-Code
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Enumerate
(20 points) Write a templated C++ function called 
\family typewriter
BinarySearch
\family default
 which searches for a target 
\family typewriter
x
\family default
 of any numeric type 
\family typewriter
T
\family default
, and test it using a sorted vector of type 
\family typewriter
T
\family default
.
 Provide the formulae on the number of comparisons in terms of 
\begin_inset Formula $n$
\end_inset

, the length of the vector, when searching for a target in the best and
 the worst cases.
 Describe the situations of getting the best and worst cases.
 What is the classification of the algorithm in the best and worst cases
 in terms of the Big-O notation?
\end_layout

\begin_layout LyX-Code
template <typename T> 
\end_layout

\begin_layout LyX-Code
int GenBinSearch(vector<T> a, T x){ 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
int bot = 0, top = a.size()-1, mid = (a.size()-1) / 2; 
\end_layout

\begin_layout LyX-Code
	
\end_layout

\begin_layout LyX-Code
// early return if element is not within vector's sorted range 	
\end_layout

\begin_layout LyX-Code
if(x < a[0] || x > a[a.size()-1]){ 		
\end_layout

\begin_deeper
\begin_layout LyX-Code
return -1; 	
\end_layout

\end_deeper
\begin_layout LyX-Code
} 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
// main sort loop 	
\end_layout

\begin_layout LyX-Code
while(top > bot){ 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
mid = bot + ( (top - bot) / 2 ); 		
\end_layout

\begin_layout LyX-Code
if(x == a[mid]){ 			
\end_layout

\begin_deeper
\begin_layout LyX-Code
return mid; 		
\end_layout

\end_deeper
\begin_layout LyX-Code
}else if(x > a[mid]){ 			
\end_layout

\begin_deeper
\begin_layout LyX-Code
bot = mid+1; 		
\end_layout

\end_deeper
\begin_layout LyX-Code
}else{ 			
\end_layout

\begin_deeper
\begin_layout LyX-Code
top = mid-1; 		
\end_layout

\end_deeper
\begin_layout LyX-Code
} 	
\end_layout

\end_deeper
\begin_layout LyX-Code
} 	
\end_layout

\end_deeper
\begin_layout LyX-Code
return -1; 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Best Case: The best case would be if x was the center element of 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

.
 As it would return instantly, the running time would be O(1).
\end_layout

\begin_layout Standard
Worst Case: The worst case would be if x was either the first or last element
 of 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 or not within a.
 If n is the size of the array, this function would be O(log n).
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Enumerate
(10 points) 
\series bold
(R-4.7 p.
 185)
\series default
 The number of operations executed by algorithms 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 is 
\begin_inset Formula $8n\log n$
\end_inset

 and 
\begin_inset Formula $2n^{2}$
\end_inset

, respectively.
 Determine 
\begin_inset Formula $n_{0}$
\end_inset

 such that 
\begin_inset Formula $A$
\end_inset

 is better than 
\begin_inset Formula $B$
\end_inset

 for 
\begin_inset Formula $n\geq n_{0}$
\end_inset

.
\end_layout

\begin_layout Standard
As the graph lines for these algorithms intersect before 
\begin_inset Formula $2n^{2}$
\end_inset

 grows noticeably faster, we can determine 
\begin_inset ERT
status open

\begin_layout Plain Layout

$n_{0}$
\end_layout

\end_inset

 as the point where the two lines intersect.
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $8n\log n$
\end_inset

 = 
\begin_inset Formula $2n^{2}$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $4\log n$
\end_inset

 = 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
frac{n}{
\backslash
log n}$
\end_layout

\end_inset

 = 4
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
frac{16}{
\backslash
log 16}$
\end_layout

\end_inset

 = 4
\end_layout

\begin_layout LyX-Code
16 = n
\end_layout

\begin_layout Standard
Because they are equal at n = 16, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$2n^{2}$
\end_layout

\end_inset

 (i.e.
 B) starts growing faster at n = 17.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Enumerate
(10 points) 
\series bold
(R-4.21 p.
 186)
\series default
 Bill has an algorithm, 
\family typewriter
find2D
\family default
, to find an element 
\begin_inset Formula $x$
\end_inset

 in an 
\begin_inset Formula $n\times n$
\end_inset

 array 
\begin_inset Formula $A$
\end_inset

.
 The algorithm 
\family typewriter
find2D
\family default
 iterates over the rows of A, and calls the algorithm 
\family typewriter
arrayFind
\family default
, see Code Fragment 4.5, p.
 184, on each row, until 
\begin_inset Formula $x$
\end_inset

 is found or it has searched all rows of A.
 What is the worst-case running time of 
\family typewriter
find2D
\family default
 in terms of 
\begin_inset Formula $n$
\end_inset

? What is the worst-case running time of 
\family typewriter
find2D
\family default
 in terms of 
\begin_inset Formula $N$
\end_inset

, where 
\begin_inset Formula $N$
\end_inset

 is the total size of A? Would it be correct to say that 
\family typewriter
find2D
\family default
 is a linear-time algorithm? Why or why not?
\end_layout

\begin_layout Standard
find2D by itself would have a worst case time of O(n), as it only loops
 from 0 to n while performing just 1 operation (comparison) per iteration.
 This worst case would be if x is the last element or is not contained within
 A.
\end_layout

\begin_layout Standard
The worst case for find2D over N would be O(
\begin_inset ERT
status open

\begin_layout Plain Layout

$n^{2}$
\end_layout

\end_inset

), as it would be looping n times through arrays of size n, doing the same
 number of operations per iteration.
 This worst case would be if x were A[n-1][n-1] (i.e.
 the last element of A) or not in A.
\end_layout

\begin_layout Standard
By itself, the function find2D runs in linear time, as it is O(n).
 The number of operations increases linearly and directly corresponds to
 the size of input array A.
\end_layout

\begin_layout Enumerate
(10 points) 
\series bold
(R-4.39 p.
 188)
\series default
 Al and Bob are arguing about their algorithms.
 Al claims his 
\begin_inset Formula $O(n\log n)$
\end_inset

-time method is 
\series bold
always
\series default
 faster than Bob's 
\begin_inset Formula $O(n^{2})$
\end_inset

-time method.
 To settle the issue, they perform a set of experiments.
 To Al's dismay, they find that if 
\begin_inset Formula $n<100$
\end_inset

, the 
\begin_inset Formula $O(n^{2})$
\end_inset

-time algorithm runs faster, and only when 
\begin_inset Formula $n\geq100$
\end_inset

 is the 
\begin_inset Formula $O(n\log n)$
\end_inset

-time algorithm better.
 Explain how this is possible.
 
\end_layout

\begin_layout Standard
As can be seen in Problem 5 of this assignment, one can have a function
 that is 
\begin_inset Formula $O(n^{2})$
\end_inset

 that runs better than 
\begin_inset Formula $O(n\log n)$
\end_inset

.
 In Problem 5, the algorithm of time 
\begin_inset ERT
status open

\begin_layout Plain Layout

$2n^{2}$
\end_layout

\end_inset

 performs better than the algorithm of time 
\begin_inset Formula $8n\log n$
\end_inset

 from n = 0 to n = 16, which has been achieved by changing the coefficient
 of each algorithm's time function.
 Through some trial and error on graphing software, the 
\begin_inset Formula $O(n\log n)$
\end_inset

 algorithm for this question could be around 
\begin_inset Formula $65n\log n$
\end_inset

 and the 
\begin_inset Formula $O(n^{2})$
\end_inset

 around 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset ERT
status open

\begin_layout Plain Layout

$3n^{2}$
\end_layout

\end_inset

 to meet the conditions described.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Enumerate
(20 points) Find the running time functions for the algorithms below and
 write their classification using Big-O asymptotic notation.
 The running time function should provide a formula on the number of operations
 performed on the variabl
\family typewriter
e
\family default
 
\begin_inset Formula $s$
\end_inset

.
 Note that array indices start from 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout LyX-Code

\series bold
Algorithm
\series default
 Ex1(A):
\end_layout

\begin_layout LyX-Code

\series bold
  Input
\series default
: An array A storing 
\begin_inset Formula $n\geq1$
\end_inset

 integers.
\end_layout

\begin_layout LyX-Code

\series bold
  Output
\series default
: The sum of the elements in A.
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $s\leftarrow A[0]$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
for
\series default
 
\begin_inset Formula $i\leftarrow1$
\end_inset

 to 
\begin_inset Formula $n-1$
\end_inset

 
\series bold
do
\end_layout

\begin_layout LyX-Code
   
\begin_inset Formula $s\leftarrow s+A[i]$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
end for
\end_layout

\begin_layout LyX-Code

\series bold
return
\series default
 
\begin_inset Formula $s$
\end_inset


\end_layout

\begin_layout Standard
The running time function for this would be f(n) = n - 1, as it iterates
 through n, but does the first comparison out of the loop.
 This function is O(n).
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Algorithm
\series default
 Ex2(A):
\end_layout

\begin_layout LyX-Code

\series bold
  Input
\series default
: An array A storing 
\begin_inset Formula $n\geq1$
\end_inset

 integers.
\end_layout

\begin_layout LyX-Code

\series bold
  Output
\series default
: The sum of the elements at even positions in A.
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $s\leftarrow A[0]$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
for
\series default
 
\begin_inset Formula $i\leftarrow2$
\end_inset

 
\series bold
to
\series default
 
\begin_inset Formula $n-1$
\end_inset

 
\series bold
by 
\series default
increments of 2
\series bold
 do
\end_layout

\begin_layout LyX-Code
  
\begin_inset Formula $s\leftarrow s+A[i]$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
end for
\end_layout

\begin_layout LyX-Code

\series bold
return
\series default
 
\begin_inset Formula $s$
\end_inset


\end_layout

\begin_layout Standard
The running time algorithm for Ex2 would be f(n) = 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
frac{n}{2}$
\end_layout

\end_inset

, as it covers the same circumstances as Ex1 but with half the elements.
 This function is also O(n).
 This function would not work properly for arrays of size 1 or 2 due to
 the indexing used.
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Algorithm
\series default
 Ex3(A):
\end_layout

\begin_layout LyX-Code
   
\series bold
Input
\series default
: An array A storing 
\begin_inset Formula $n\geq1$
\end_inset

 integers.
\end_layout

\begin_layout LyX-Code

\series bold
   Output
\series default
: The sum of the partial sums in A.
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $s\leftarrow0$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
for
\series default
 
\begin_inset Formula $i\leftarrow0$
\end_inset

  
\series bold
to
\series default
 
\begin_inset Formula $n-1$
\end_inset

 
\series bold
do
\end_layout

\begin_layout LyX-Code
   
\begin_inset Formula $s\leftarrow s+A[0]$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
   for
\series default
 
\begin_inset Formula $j\leftarrow1$
\end_inset

 
\series bold
to
\series default
 
\begin_inset Formula $i$
\end_inset

 
\series bold
do
\end_layout

\begin_layout LyX-Code
     
\begin_inset Formula $s\leftarrow s+A[j]$
\end_inset


\end_layout

\begin_layout LyX-Code
   
\series bold
end for
\end_layout

\begin_layout LyX-Code

\series bold
end for
\end_layout

\begin_layout LyX-Code

\series bold
return
\series default
 
\begin_inset Formula $s$
\end_inset


\end_layout

\begin_layout Standard
The running time algorithm for Ex3 is f(n) = n + n!.
 For each iteration i of the main loop (from 0 to n-1), there is also another
 loop (from 1 to i) added on.
 This function is O(n!).
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Algorithm
\series default
 Ex4(A):
\end_layout

\begin_layout LyX-Code
   
\series bold
Input
\series default
: An array A storing 
\begin_inset Formula $n\geq1$
\end_inset

 integers.
\end_layout

\begin_layout LyX-Code

\series bold
   Output
\series default
: The sum of the partial sums in A.
\end_layout

\begin_layout LyX-Code
\begin_inset Formula $t\leftarrow0$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $s\leftarrow0$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
for
\series default
 
\begin_inset Formula $i\leftarrow1$
\end_inset

 
\series bold
to
\series default
 
\begin_inset Formula $n-1$
\end_inset

 
\series bold
do
\series default
 
\end_layout

\begin_layout LyX-Code
   
\begin_inset Formula $s\leftarrow s+A[i]$
\end_inset


\end_layout

\begin_layout LyX-Code
   
\begin_inset Formula $t\leftarrow t+s$
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
end for
\end_layout

\begin_layout LyX-Code

\series bold
return
\series default
 
\begin_inset Formula $t$
\end_inset


\end_layout

\begin_layout Standard
The running time algorithm for Ex4 is f(n) = 2n - 1.
 It is the same as Ex1, but does one more operation per iteration through
 n.
 This function is O(n).
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\end_body
\end_document
